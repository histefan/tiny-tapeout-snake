--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_histefan_top.v
    - vga_sync.v
    - btn_debounce.v
    - synchronizer.v
    - draw_apple.v
    - draw_border.v
    - draw_snake.v
    - collision.v
    - rgb_select.v
    - snake_control.v
    - random_position.v
    - snake_update_trigger.v
    - snake.v
  top_module:  "tt_um_histefan_top"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x2"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Stefan Hirschboeck"      # Your name
  title:        "Snake Game"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Simple snake game"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Simple implementation of the game "Snake" with VGA Output.
      Due to size limitations snake can only grow to 10 body parts.
      Game resets when snake touches border or any of its body parts
      Vga output is compatible with tiny vga pmod.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset snake can be controlled though inputs. When collecting an apple snake grows by 1 body part. 
      clock has to be set to 25.179 Mhz for vga sync signal generation to work.
      inputs should be done with push buttons. Not pressed is logic 0, pressed is logic 1

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - none
    - none
    - none
    - none
    - Right
    - Left
    - Down
    - Up
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - R1
    - G1
    - B1
    - vsync
    - R0
    - G0
    - B0
    - hsync
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:


# The following fields are optional
  tag:          "game, snake"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "vga display"      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     25179000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
